[W Context.cpp:70] Warning: torch.use_deterministic_algorithms is in beta, and its design and functionality may change in the future. (function operator())
Registered Datasets: ['satellite_Train', 'satellite_Val']
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/HP743_4S_500x.png
	num_instances: 103
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S08_01_SE1_1000X94.png
	num_instances: 68
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/HP743_6S_250x.png
	num_instances: 102
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
	num_instances: 88
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
	num_instances: 54
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
	num_instances: 45
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
	num_instances: 111
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
	num_instances: 98
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
	num_instances: 49
Weights not found, weights will be downloaded from source: https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl
[32m[12/12 23:09:11 d2.engine.defaults]: [0mModel:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn3): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn4): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (deconv_relu): ReLU()
      (predictor): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[32m[12/12 23:09:12 d2.data.build]: [0mRemoved 0 images with no usable annotations. 20 images left.
[32m[12/12 23:09:12 d2.data.build]: [0mDistribution of instances among all 1 categories:
[36m|  category  | #instances   |
|:----------:|:-------------|
| satellite  | 1412         |
|            |              |[0m
[32m[12/12 23:09:12 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice')]
[32m[12/12 23:09:12 d2.data.build]: [0mUsing training sampler TrainingSampler
[32m[12/12 23:09:12 d2.data.common]: [0mSerializing 20 elements to byte tensors and concatenating them all ...
[32m[12/12 23:09:12 d2.data.common]: [0mSerialized dataset takes 0.46 MiB
[5m[31mWARNING[0m [32m[12/12 23:09:12 d2.solver.build]: [0mSOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[32m[12/12 23:09:12 d2.checkpoint.c2_model_loading]: [0mRenaming Caffe2 weights ......
[32m[12/12 23:09:12 d2.checkpoint.c2_model_loading]: [0mFollowing weights matched with submodule backbone.bottom_up:
| Names in Model    | Names in Checkpoint      | Shapes                                          |
|:------------------|:-------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2_0_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| res2.0.conv2.*    | res2_0_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2_0_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2_0_branch1_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.1.conv1.*    | res2_1_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2_1_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2_1_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2_2_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2_2_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2_2_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3_0_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3_0_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3_0_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3_0_branch1_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3_1_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3_1_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3_1_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3_2_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3_2_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3_2_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3_3_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3_3_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3_3_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4_0_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4_0_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4_0_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4_0_branch1_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4_1_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4_1_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4_1_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4_2_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4_2_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4_2_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4_3_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4_3_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4_3_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4_4_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4_4_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4_4_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4_5_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4_5_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4_5_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5_0_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5_0_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5_0_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5_0_branch1_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5_1_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5_1_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5_1_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5_2_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5_2_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5_2_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.norm.* | res_conv1_bn_*           | (64,) (64,) (64,) (64,)                         |
| stem.conv1.weight | conv1_w                  | (64, 3, 7, 7)                                   |
[32m[12/12 23:09:12 d2.engine.train_loop]: [0mStarting training from iteration 0
[32m[12/12 23:09:15 d2.utils.events]: [0m eta: 0:00:11  iter: 19  total_loss: 3.301  loss_cls: 0.5135  loss_box_reg: 0.02782  loss_mask: 0.6728  loss_rpn_cls: 0.6589  loss_rpn_loc: 1.292  time: 0.1509  data_time: 0.0240  lr: 0.00019981  max_mem: 1616M
[32m[12/12 23:09:19 d2.utils.events]: [0m eta: 0:00:09  iter: 39  total_loss: 2.366  loss_cls: 0.3501  loss_box_reg: 0.03951  loss_mask: 0.5965  loss_rpn_cls: 0.5985  loss_rpn_loc: 0.7599  time: 0.1526  data_time: 0.0018  lr: 0.00039961  max_mem: 1701M
[32m[12/12 23:09:22 d2.utils.events]: [0m eta: 0:00:06  iter: 59  total_loss: 2.181  loss_cls: 0.2677  loss_box_reg: 0.1027  loss_mask: 0.5853  loss_rpn_cls: 0.5829  loss_rpn_loc: 0.6629  time: 0.1524  data_time: 0.0016  lr: 0.00059941  max_mem: 1701M
[32m[12/12 23:09:25 d2.utils.events]: [0m eta: 0:00:03  iter: 79  total_loss: 2.197  loss_cls: 0.2605  loss_box_reg: 0.1876  loss_mask: 0.5571  loss_rpn_cls: 0.5419  loss_rpn_loc: 0.5542  time: 0.1533  data_time: 0.0017  lr: 0.00079921  max_mem: 1777M
[32m[12/12 23:09:30 d2.utils.events]: [0m eta: 0:00:00  iter: 99  total_loss: 2.156  loss_cls: 0.2693  loss_box_reg: 0.3126  loss_mask: 0.5369  loss_rpn_cls: 0.4606  loss_rpn_loc: 0.5136  time: 0.1556  data_time: 0.0018  lr: 0.00099901  max_mem: 1777M
[32m[12/12 23:09:30 d2.engine.hooks]: [0mOverall training speed: 98 iterations in 0:00:15 (0.1556 s / it)
[32m[12/12 23:09:30 d2.engine.hooks]: [0mTotal training time: 0:00:17 (0:00:02 on hooks)
[32m[12/12 23:09:30 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[32m[12/12 23:09:30 d2.data.common]: [0mSerializing 20 elements to byte tensors and concatenating them all ...
[32m[12/12 23:09:30 d2.data.common]: [0mSerialized dataset takes 0.46 MiB
[5m[31mWARNING[0m [32m[12/12 23:09:30 d2.engine.defaults]: [0mNo evaluator found. Use `DefaultTrainer.test(evaluators=)`, or implement its `build_evaluator` method.
[32m[12/12 23:09:30 d2.data.build]: [0mDistribution of instances among all 1 categories:
[36m|  category  | #instances   |
|:----------:|:-------------|
| satellite  | 445          |
|            |              |[0m
[32m[12/12 23:09:30 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[32m[12/12 23:09:30 d2.data.common]: [0mSerializing 6 elements to byte tensors and concatenating them all ...
[32m[12/12 23:09:30 d2.data.common]: [0mSerialized dataset takes 0.11 MiB
[5m[31mWARNING[0m [32m[12/12 23:09:30 d2.engine.defaults]: [0mNo evaluator found. Use `DefaultTrainer.test(evaluators=)`, or implement its `build_evaluator` method.
USING MODEL WEIGHT: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_0000049.pth
Dataset: satellite_Val
	File: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
	num_instances: 250
gt filename: S08_03_SE1_1000X03.png	 pred filename: S08_03_SE1_1000X03.png
gt filename: S06_01_SE1_500X67.png	 pred filename: S06_01_SE1_500X67.png
gt filename: S04_02_SE1_1000X50.png	 pred filename: S04_02_SE1_1000X50.png
gt filename: S03_03_SE1_1250X41.png	 pred filename: S03_03_SE1_1250X41.png
gt filename: S02_01_SE1_300X14.png	 pred filename: S02_01_SE1_300X14.png
gt filename: HP743_2S_250x.png	 pred filename: HP743_2S_250x.png
x:  [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2]
y:  [0.0, 0.0, 0.0, 0.01, 0.01, 0.0, 0.0, 0.0, 0.02, 0.02, 0.02, 0.02]
Average Precision Score:  0.004
Average Recall Score:     0.01350942779514208
Precision: 0.0
Recall: 0.0
---
Precision: 0.0
Recall: 0.0
---
Precision: 0.0032371011428948934
Recall: 0.02880658436213992
---
Precision: 0.006219765031098825
Recall: 0.01653272101033295
---
Precision: 0.05685883038016804
Recall: 0.1566941769830353
---
Precision: 0.003214941824862217
Recall: 0.0123094958968347
---
USING MODEL WEIGHT: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_final.pth
Dataset: satellite_Val
	File: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
	num_instances: 250
gt filename: S08_03_SE1_1000X03.png	 pred filename: S08_03_SE1_1000X03.png
gt filename: S06_01_SE1_500X67.png	 pred filename: S06_01_SE1_500X67.png
gt filename: S04_02_SE1_1000X50.png	 pred filename: S04_02_SE1_1000X50.png
gt filename: S03_03_SE1_1250X41.png	 pred filename: S03_03_SE1_1250X41.png
gt filename: S02_01_SE1_300X14.png	 pred filename: S02_01_SE1_300X14.png
gt filename: HP743_2S_250x.png	 pred filename: HP743_2S_250x.png
x:  [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2]
y:  [0.05, 0.01, 0.03, 0.07, 0.04, 0.01, 0.15, 0.06, 0.16, 0.16, 0.1, 0.06]
Average Precision Score:  0.036
Average Recall Score:     0.11404430868716582
Precision: 0.00038765769088709555
Recall: 0.001022644363854853
---
Precision: 0.00010827044624913696
Recall: 0.0005713394173656419
---
Precision: 0.00018665501836723867
Recall: 0.019946535060662143
---
Precision: 0.0005877807003141178
Recall: 0.001249669631958544
---
Precision: 0.0003263034804344982
Recall: 0.0007944049448652415
---
Precision: 5.452306250649708e-05
Recall: 0.00015110781958058446
---
Ignoring Final Model
USING MODEL WEIGHT: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_0000099.pth
Dataset: satellite_Val
	File: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
	num_instances: 250
gt filename: S08_03_SE1_1000X03.png	 pred filename: S08_03_SE1_1000X03.png
gt filename: S06_01_SE1_500X67.png	 pred filename: S06_01_SE1_500X67.png
gt filename: S04_02_SE1_1000X50.png	 pred filename: S04_02_SE1_1000X50.png
gt filename: S03_03_SE1_1250X41.png	 pred filename: S03_03_SE1_1250X41.png
gt filename: S02_01_SE1_300X14.png	 pred filename: S02_01_SE1_300X14.png
gt filename: HP743_2S_250x.png	 pred filename: HP743_2S_250x.png
x:  [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2]
y:  [0.05, 0.01, 0.03, 0.07, 0.04, 0.01, 0.15, 0.06, 0.16, 0.16, 0.1, 0.06]
Average Precision Score:  0.036
Average Recall Score:     0.11404430868716582
Precision: 0.00038765769088709555
Recall: 0.001022644363854853
---
Precision: 0.00010827044624913696
Recall: 0.0005713394173656419
---
Precision: 0.00018665501836723867
Recall: 0.019946535060662143
---
Precision: 0.0005877807003141178
Recall: 0.001249669631958544
---
Precision: 0.0003263034804344982
Recall: 0.0007944049448652415
---
Precision: 5.452306250649708e-05
Recall: 0.00015110781958058446
---
Deleting: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_0000049.pth
Current File Path
../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_0000049.pth
New File Path
../../../../../../../ocean/projects/dmr200021p/sprice/variance/REPO_Test/trial1/model0.pth
Deleting: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_final.pth
Current File Path
../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_final.pth
New File Path
../../../../../../../ocean/projects/dmr200021p/sprice/variance/REPO_Test/trial1/model0.pth
Deleting: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_0000099.pth
Current File Path
../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_0000099.pth
New File Path
../../../../../../../ocean/projects/dmr200021p/sprice/variance/REPO_Test/trial1/model0.pth
Deleting: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/results_checkpoint_0000049.pickle
../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/results_checkpoint_0000049.pickle
Deleting: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/results_checkpoint_final.pickle
../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/results_checkpoint_final.pickle
Deleting: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/results_checkpoint_0000099.pickle
../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/results_checkpoint_0000099.pickle
Removing: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/metrics.json
Removing: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/last_checkpoint
Registered Datasets: ['satellite_Train', 'satellite_Val']
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/HP743_4S_500x.png
	num_instances: 103
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S08_01_SE1_1000X94.png
	num_instances: 68
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/HP743_6S_250x.png
	num_instances: 102
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
	num_instances: 88
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
	num_instances: 54
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
	num_instances: 45
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
	num_instances: 111
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
	num_instances: 98
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
	num_instances: 49
Weights not found, weights will be downloaded from source: https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl
[32m[12/12 23:10:36 d2.engine.defaults]: [0mModel:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn3): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn4): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (deconv_relu): ReLU()
      (predictor): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[32m[12/12 23:10:36 d2.data.build]: [0mRemoved 0 images with no usable annotations. 20 images left.
[32m[12/12 23:10:36 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice')]
[32m[12/12 23:10:36 d2.data.build]: [0mUsing training sampler TrainingSampler
[32m[12/12 23:10:36 d2.data.common]: [0mSerializing 20 elements to byte tensors and concatenating them all ...
[32m[12/12 23:10:36 d2.data.common]: [0mSerialized dataset takes 0.46 MiB
[5m[31mWARNING[0m [32m[12/12 23:10:36 d2.solver.build]: [0mSOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[32m[12/12 23:10:36 d2.checkpoint.c2_model_loading]: [0mRenaming Caffe2 weights ......
[32m[12/12 23:10:36 d2.checkpoint.c2_model_loading]: [0mFollowing weights matched with submodule backbone.bottom_up:
| Names in Model    | Names in Checkpoint      | Shapes                                          |
|:------------------|:-------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2_0_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| res2.0.conv2.*    | res2_0_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2_0_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2_0_branch1_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.1.conv1.*    | res2_1_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2_1_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2_1_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2_2_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2_2_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2_2_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3_0_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3_0_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3_0_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3_0_branch1_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3_1_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3_1_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3_1_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3_2_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3_2_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3_2_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3_3_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3_3_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3_3_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4_0_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4_0_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4_0_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4_0_branch1_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4_1_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4_1_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4_1_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4_2_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4_2_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4_2_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4_3_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4_3_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4_3_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4_4_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4_4_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4_4_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4_5_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4_5_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4_5_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5_0_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5_0_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5_0_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5_0_branch1_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5_1_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5_1_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5_1_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5_2_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5_2_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5_2_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.norm.* | res_conv1_bn_*           | (64,) (64,) (64,) (64,)                         |
| stem.conv1.weight | conv1_w                  | (64, 3, 7, 7)                                   |
[32m[12/12 23:10:36 d2.engine.train_loop]: [0mStarting training from iteration 0
[32m[12/12 23:10:40 d2.utils.events]: [0m eta: 0:00:12  iter: 19  total_loss: 3.303  loss_cls: 0.5156  loss_box_reg: 0.02782  loss_mask: 0.6728  loss_rpn_cls: 0.6589  loss_rpn_loc: 1.292  time: 0.1588  data_time: 0.0235  lr: 0.00019981  max_mem: 3212M
[32m[12/12 23:10:43 d2.utils.events]: [0m eta: 0:00:09  iter: 39  total_loss: 2.364  loss_cls: 0.3464  loss_box_reg: 0.03961  loss_mask: 0.5965  loss_rpn_cls: 0.5985  loss_rpn_loc: 0.7602  time: 0.1533  data_time: 0.0015  lr: 0.00039961  max_mem: 3212M
[32m[12/12 23:10:47 d2.utils.events]: [0m eta: 0:00:06  iter: 59  total_loss: 2.164  loss_cls: 0.2664  loss_box_reg: 0.1042  loss_mask: 0.5831  loss_rpn_cls: 0.5829  loss_rpn_loc: 0.6634  time: 0.1531  data_time: 0.0016  lr: 0.00059941  max_mem: 3212M
[32m[12/12 23:10:50 d2.utils.events]: [0m eta: 0:00:03  iter: 79  total_loss: 2.186  loss_cls: 0.265  loss_box_reg: 0.1856  loss_mask: 0.5589  loss_rpn_cls: 0.5418  loss_rpn_loc: 0.5528  time: 0.1538  data_time: 0.0014  lr: 0.00079921  max_mem: 3212M
[32m[12/12 23:10:54 d2.utils.events]: [0m eta: 0:00:00  iter: 99  total_loss: 2.138  loss_cls: 0.2618  loss_box_reg: 0.3183  loss_mask: 0.5366  loss_rpn_cls: 0.4611  loss_rpn_loc: 0.5086  time: 0.1561  data_time: 0.0018  lr: 0.00099901  max_mem: 3212M
[32m[12/12 23:10:54 d2.engine.hooks]: [0mOverall training speed: 98 iterations in 0:00:15 (0.1561 s / it)
[32m[12/12 23:10:54 d2.engine.hooks]: [0mTotal training time: 0:00:17 (0:00:01 on hooks)
[32m[12/12 23:10:54 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[32m[12/12 23:10:54 d2.data.common]: [0mSerializing 20 elements to byte tensors and concatenating them all ...
[32m[12/12 23:10:54 d2.data.common]: [0mSerialized dataset takes 0.46 MiB
[5m[31mWARNING[0m [32m[12/12 23:10:54 d2.engine.defaults]: [0mNo evaluator found. Use `DefaultTrainer.test(evaluators=)`, or implement its `build_evaluator` method.
[32m[12/12 23:10:54 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[32m[12/12 23:10:54 d2.data.common]: [0mSerializing 6 elements to byte tensors and concatenating them all ...
[32m[12/12 23:10:54 d2.data.common]: [0mSerialized dataset takes 0.11 MiB
[5m[31mWARNING[0m [32m[12/12 23:10:54 d2.engine.defaults]: [0mNo evaluator found. Use `DefaultTrainer.test(evaluators=)`, or implement its `build_evaluator` method.
USING MODEL WEIGHT: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_0000049.pth
Dataset: satellite_Val
	File: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
	num_instances: 250
gt filename: S08_03_SE1_1000X03.png	 pred filename: S08_03_SE1_1000X03.png
gt filename: S06_01_SE1_500X67.png	 pred filename: S06_01_SE1_500X67.png
gt filename: S04_02_SE1_1000X50.png	 pred filename: S04_02_SE1_1000X50.png
gt filename: S03_03_SE1_1250X41.png	 pred filename: S03_03_SE1_1250X41.png
gt filename: S02_01_SE1_300X14.png	 pred filename: S02_01_SE1_300X14.png
gt filename: HP743_2S_250x.png	 pred filename: HP743_2S_250x.png
x:  [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2]
y:  [0.0, 0.0, 0.0, 0.01, 0.01, 0.0, 0.0, 0.0, 0.02, 0.02, 0.02, 0.0]
Average Precision Score:  0.0033333333333333335
Average Recall Score:     0.010108067250924392
Precision: 0.0
Recall: 0.0
---
Precision: 0.0
Recall: 0.0
---
Precision: 0.002553967771359076
Recall: 0.014339364970979856
---
Precision: 0.006591734978450097
Recall: 0.017391304347826087
---
Precision: 0.056430228704010606
Recall: 0.15596015115080727
---
Precision: 0.0
Recall: 0.0
---
USING MODEL WEIGHT: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_final.pth
Dataset: satellite_Val
	File: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
	num_instances: 250
gt filename: S08_03_SE1_1000X03.png	 pred filename: S08_03_SE1_1000X03.png
gt filename: S06_01_SE1_500X67.png	 pred filename: S06_01_SE1_500X67.png
gt filename: S04_02_SE1_1000X50.png	 pred filename: S04_02_SE1_1000X50.png
gt filename: S03_03_SE1_1250X41.png	 pred filename: S03_03_SE1_1250X41.png
gt filename: S02_01_SE1_300X14.png	 pred filename: S02_01_SE1_300X14.png
gt filename: HP743_2S_250x.png	 pred filename: HP743_2S_250x.png
x:  [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2]
y:  [0.06, 0.02, 0.03, 0.07, 0.06, 0.01, 0.16, 0.07, 0.18, 0.16, 0.14, 0.04]
Average Precision Score:  0.04
Average Recall Score:     0.12612973208211306
Precision: 0.00048469616730993626
Recall: 0.00297304191110981
---
Precision: 0.00010507640009526927
Recall: 0.001908165212413482
---
Precision: 0.00028862665077517707
Recall: 0.195069033530572
---
Precision: 0.0005015357287350049
Recall: 0.0015952606671159287
---
Precision: 0.0005047045429555471
Recall: 0.0020579741625381866
---
Precision: 3.994427618649208e-05
Recall: 0.00011319393806975379
---
Ignoring Final Model
USING MODEL WEIGHT: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_0000099.pth
Dataset: satellite_Val
	File: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
	num_instances: 250
gt filename: S08_03_SE1_1000X03.png	 pred filename: S08_03_SE1_1000X03.png
gt filename: S06_01_SE1_500X67.png	 pred filename: S06_01_SE1_500X67.png
gt filename: S04_02_SE1_1000X50.png	 pred filename: S04_02_SE1_1000X50.png
gt filename: S03_03_SE1_1250X41.png	 pred filename: S03_03_SE1_1250X41.png
gt filename: S02_01_SE1_300X14.png	 pred filename: S02_01_SE1_300X14.png
gt filename: HP743_2S_250x.png	 pred filename: HP743_2S_250x.png
x:  [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2]
y:  [0.06, 0.02, 0.03, 0.07, 0.06, 0.01, 0.16, 0.07, 0.18, 0.16, 0.14, 0.04]
Average Precision Score:  0.04
Average Recall Score:     0.12612973208211306
Precision: 0.00048469616730993626
Recall: 0.00297304191110981
---
Precision: 0.00010507640009526927
Recall: 0.001908165212413482
---
Precision: 0.00028862665077517707
Recall: 0.195069033530572
---
Precision: 0.0005015357287350049
Recall: 0.0015952606671159287
---
Precision: 0.0005047045429555471
Recall: 0.0020579741625381866
---
Precision: 3.994427618649208e-05
Recall: 0.00011319393806975379
---
Deleting: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_0000049.pth
Current File Path
../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_0000049.pth
New File Path
../../../../../../../ocean/projects/dmr200021p/sprice/variance/REPO_Test/trial1/model1.pth
Deleting: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_final.pth
Current File Path
../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_final.pth
New File Path
../../../../../../../ocean/projects/dmr200021p/sprice/variance/REPO_Test/trial1/model1.pth
Deleting: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_0000099.pth
Current File Path
../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_0000099.pth
New File Path
../../../../../../../ocean/projects/dmr200021p/sprice/variance/REPO_Test/trial1/model1.pth
Deleting: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/results_checkpoint_0000049.pickle
../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/results_checkpoint_0000049.pickle
Deleting: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/results_checkpoint_final.pickle
../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/results_checkpoint_final.pickle
Deleting: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/results_checkpoint_0000099.pickle
../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/results_checkpoint_0000099.pickle
Removing: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/metrics.json
Removing: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/last_checkpoint
Registered Datasets: ['satellite_Train', 'satellite_Val']
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/HP743_4S_500x.png
	num_instances: 103
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S08_01_SE1_1000X94.png
	num_instances: 68
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/HP743_6S_250x.png
	num_instances: 102
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
	num_instances: 88
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
	num_instances: 54
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
	num_instances: 45
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
	num_instances: 111
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
	num_instances: 98
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
	num_instances: 49
Weights not found, weights will be downloaded from source: https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl
[32m[12/12 23:11:59 d2.engine.defaults]: [0mModel:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn3): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn4): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (deconv_relu): ReLU()
      (predictor): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[32m[12/12 23:11:59 d2.data.build]: [0mRemoved 0 images with no usable annotations. 20 images left.
[32m[12/12 23:11:59 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice')]
[32m[12/12 23:11:59 d2.data.build]: [0mUsing training sampler TrainingSampler
[32m[12/12 23:11:59 d2.data.common]: [0mSerializing 20 elements to byte tensors and concatenating them all ...
[32m[12/12 23:11:59 d2.data.common]: [0mSerialized dataset takes 0.46 MiB
[5m[31mWARNING[0m [32m[12/12 23:11:59 d2.solver.build]: [0mSOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[32m[12/12 23:11:59 d2.checkpoint.c2_model_loading]: [0mRenaming Caffe2 weights ......
[32m[12/12 23:11:59 d2.checkpoint.c2_model_loading]: [0mFollowing weights matched with submodule backbone.bottom_up:
| Names in Model    | Names in Checkpoint      | Shapes                                          |
|:------------------|:-------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2_0_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| res2.0.conv2.*    | res2_0_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2_0_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2_0_branch1_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.1.conv1.*    | res2_1_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2_1_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2_1_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2_2_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2_2_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2_2_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3_0_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3_0_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3_0_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3_0_branch1_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3_1_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3_1_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3_1_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3_2_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3_2_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3_2_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3_3_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3_3_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3_3_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4_0_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4_0_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4_0_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4_0_branch1_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4_1_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4_1_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4_1_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4_2_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4_2_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4_2_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4_3_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4_3_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4_3_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4_4_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4_4_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4_4_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4_5_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4_5_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4_5_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5_0_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5_0_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5_0_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5_0_branch1_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5_1_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5_1_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5_1_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5_2_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5_2_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5_2_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.norm.* | res_conv1_bn_*           | (64,) (64,) (64,) (64,)                         |
| stem.conv1.weight | conv1_w                  | (64, 3, 7, 7)                                   |
[32m[12/12 23:12:00 d2.engine.train_loop]: [0mStarting training from iteration 0
[32m[12/12 23:12:03 d2.utils.events]: [0m eta: 0:00:11  iter: 19  total_loss: 3.306  loss_cls: 0.5149  loss_box_reg: 0.02787  loss_mask: 0.6728  loss_rpn_cls: 0.6589  loss_rpn_loc: 1.292  time: 0.1513  data_time: 0.0221  lr: 0.00019981  max_mem: 3212M
[32m[12/12 23:12:06 d2.utils.events]: [0m eta: 0:00:09  iter: 39  total_loss: 2.365  loss_cls: 0.3481  loss_box_reg: 0.03297  loss_mask: 0.5958  loss_rpn_cls: 0.5985  loss_rpn_loc: 0.7603  time: 0.1495  data_time: 0.0018  lr: 0.00039961  max_mem: 3212M
[32m[12/12 23:12:10 d2.utils.events]: [0m eta: 0:00:06  iter: 59  total_loss: 2.155  loss_cls: 0.266  loss_box_reg: 0.08475  loss_mask: 0.5839  loss_rpn_cls: 0.583  loss_rpn_loc: 0.6627  time: 0.1503  data_time: 0.0016  lr: 0.00059941  max_mem: 3212M
[32m[12/12 23:12:13 d2.utils.events]: [0m eta: 0:00:03  iter: 79  total_loss: 2.168  loss_cls: 0.2541  loss_box_reg: 0.1765  loss_mask: 0.5611  loss_rpn_cls: 0.5415  loss_rpn_loc: 0.5527  time: 0.1517  data_time: 0.0017  lr: 0.00079921  max_mem: 3212M
[32m[12/12 23:12:17 d2.utils.events]: [0m eta: 0:00:00  iter: 99  total_loss: 2.113  loss_cls: 0.2637  loss_box_reg: 0.3423  loss_mask: 0.5401  loss_rpn_cls: 0.46  loss_rpn_loc: 0.507  time: 0.1545  data_time: 0.0018  lr: 0.00099901  max_mem: 3212M
[32m[12/12 23:12:17 d2.engine.hooks]: [0mOverall training speed: 98 iterations in 0:00:15 (0.1545 s / it)
[32m[12/12 23:12:17 d2.engine.hooks]: [0mTotal training time: 0:00:16 (0:00:01 on hooks)
[32m[12/12 23:12:18 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[32m[12/12 23:12:18 d2.data.common]: [0mSerializing 20 elements to byte tensors and concatenating them all ...
[32m[12/12 23:12:18 d2.data.common]: [0mSerialized dataset takes 0.46 MiB
[5m[31mWARNING[0m [32m[12/12 23:12:18 d2.engine.defaults]: [0mNo evaluator found. Use `DefaultTrainer.test(evaluators=)`, or implement its `build_evaluator` method.
[32m[12/12 23:12:18 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[32m[12/12 23:12:18 d2.data.common]: [0mSerializing 6 elements to byte tensors and concatenating them all ...
[32m[12/12 23:12:18 d2.data.common]: [0mSerialized dataset takes 0.11 MiB
[5m[31mWARNING[0m [32m[12/12 23:12:18 d2.engine.defaults]: [0mNo evaluator found. Use `DefaultTrainer.test(evaluators=)`, or implement its `build_evaluator` method.
USING MODEL WEIGHT: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_0000049.pth
Dataset: satellite_Val
	File: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
	num_instances: 250
gt filename: S08_03_SE1_1000X03.png	 pred filename: S08_03_SE1_1000X03.png
gt filename: S06_01_SE1_500X67.png	 pred filename: S06_01_SE1_500X67.png
gt filename: S04_02_SE1_1000X50.png	 pred filename: S04_02_SE1_1000X50.png
gt filename: S03_03_SE1_1250X41.png	 pred filename: S03_03_SE1_1250X41.png
gt filename: S02_01_SE1_300X14.png	 pred filename: S02_01_SE1_300X14.png
gt filename: HP743_2S_250x.png	 pred filename: HP743_2S_250x.png
x:  [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2]
y:  [0.0, 0.0, 0.0, 0.01, 0.01, 0.0, 0.0, 0.0, 0.02, 0.02, 0.02, 0.02]
Average Precision Score:  0.004
Average Recall Score:     0.01350942779514208
Precision: 0.0
Recall: 0.0
---
Precision: 0.0
Recall: 0.0
---
Precision: 0.002720383444523609
Recall: 0.02420749279538905
---
Precision: 0.00608725059181603
Recall: 0.01593272847975216
---
Precision: 0.061606160616061605
Recall: 0.1835824809861002
---
Precision: 0.0031593199939822475
Recall: 0.012055109070034443
---
USING MODEL WEIGHT: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_final.pth
Dataset: satellite_Val
	File: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
	num_instances: 250
gt filename: S08_03_SE1_1000X03.png	 pred filename: S08_03_SE1_1000X03.png
gt filename: S06_01_SE1_500X67.png	 pred filename: S06_01_SE1_500X67.png
gt filename: S04_02_SE1_1000X50.png	 pred filename: S04_02_SE1_1000X50.png
gt filename: S03_03_SE1_1250X41.png	 pred filename: S03_03_SE1_1250X41.png
gt filename: S02_01_SE1_300X14.png	 pred filename: S02_01_SE1_300X14.png
gt filename: HP743_2S_250x.png	 pred filename: HP743_2S_250x.png
x:  [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2]
y:  [0.06, 0.02, 0.03, 0.07, 0.06, 0.02, 0.17, 0.09, 0.18, 0.16, 0.14, 0.08]
Average Precision Score:  0.042666666666666665
Average Recall Score:     0.1379128123175742
Precision: 0.0004531958333505346
Recall: 0.0012719296834015107
---
Precision: 0.00020279920730704957
Recall: 0.0009573800155208654
---
Precision: 0.00028404859933413724
Recall: 0.18174831892411142
---
Precision: 0.0005173087931040354
Recall: 0.001251298287496078
---
Precision: 0.0004686330714933955
Recall: 0.0011844291996538816
---
Precision: 7.885723264466638e-05
Recall: 0.00019225216623165741
---
Ignoring Final Model
USING MODEL WEIGHT: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_0000099.pth
Dataset: satellite_Val
	File: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
	num_instances: 250
gt filename: S08_03_SE1_1000X03.png	 pred filename: S08_03_SE1_1000X03.png
gt filename: S06_01_SE1_500X67.png	 pred filename: S06_01_SE1_500X67.png
gt filename: S04_02_SE1_1000X50.png	 pred filename: S04_02_SE1_1000X50.png
gt filename: S03_03_SE1_1250X41.png	 pred filename: S03_03_SE1_1250X41.png
gt filename: S02_01_SE1_300X14.png	 pred filename: S02_01_SE1_300X14.png
gt filename: HP743_2S_250x.png	 pred filename: HP743_2S_250x.png
x:  [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2]
y:  [0.06, 0.02, 0.03, 0.07, 0.06, 0.02, 0.17, 0.09, 0.18, 0.16, 0.14, 0.08]
Average Precision Score:  0.042666666666666665
Average Recall Score:     0.1379128123175742
Precision: 0.0004531958333505346
Recall: 0.0012719296834015107
---
Precision: 0.00020279920730704957
Recall: 0.0009573800155208654
---
Precision: 0.00028404859933413724
Recall: 0.18174831892411142
---
Precision: 0.0005173087931040354
Recall: 0.001251298287496078
---
Precision: 0.0004686330714933955
Recall: 0.0011844291996538816
---
Precision: 7.885723264466638e-05
Recall: 0.00019225216623165741
---
Deleting: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_0000049.pth
Current File Path
../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_0000049.pth
New File Path
../../../../../../../ocean/projects/dmr200021p/sprice/variance/REPO_Test/trial1/model2.pth
Deleting: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_final.pth
Current File Path
../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_final.pth
New File Path
../../../../../../../ocean/projects/dmr200021p/sprice/variance/REPO_Test/trial1/model2.pth
Deleting: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_0000099.pth
Current File Path
../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_0000099.pth
New File Path
../../../../../../../ocean/projects/dmr200021p/sprice/variance/REPO_Test/trial1/model2.pth
Deleting: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/results_checkpoint_0000049.pickle
../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/results_checkpoint_0000049.pickle
Deleting: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/results_checkpoint_final.pickle
../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/results_checkpoint_final.pickle
Deleting: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/results_checkpoint_0000099.pickle
../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/results_checkpoint_0000099.pickle
Removing: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/metrics.json
Removing: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/last_checkpoint
Registered Datasets: ['satellite_Train', 'satellite_Val']
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/HP743_4S_500x.png
	num_instances: 103
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S08_01_SE1_1000X94.png
	num_instances: 68
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/HP743_6S_250x.png
	num_instances: 102
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
	num_instances: 88
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
	num_instances: 54
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
	num_instances: 45
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
	num_instances: 111
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
	num_instances: 98
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
	num_instances: 49
Weights not found, weights will be downloaded from source: https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl
[32m[12/12 23:13:23 d2.engine.defaults]: [0mModel:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn3): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn4): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (deconv_relu): ReLU()
      (predictor): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[32m[12/12 23:13:24 d2.data.build]: [0mRemoved 0 images with no usable annotations. 20 images left.
[32m[12/12 23:13:24 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice')]
[32m[12/12 23:13:24 d2.data.build]: [0mUsing training sampler TrainingSampler
[32m[12/12 23:13:24 d2.data.common]: [0mSerializing 20 elements to byte tensors and concatenating them all ...
[32m[12/12 23:13:24 d2.data.common]: [0mSerialized dataset takes 0.46 MiB
[5m[31mWARNING[0m [32m[12/12 23:13:24 d2.solver.build]: [0mSOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[32m[12/12 23:13:24 d2.checkpoint.c2_model_loading]: [0mRenaming Caffe2 weights ......
[32m[12/12 23:13:24 d2.checkpoint.c2_model_loading]: [0mFollowing weights matched with submodule backbone.bottom_up:
| Names in Model    | Names in Checkpoint      | Shapes                                          |
|:------------------|:-------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2_0_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| res2.0.conv2.*    | res2_0_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2_0_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2_0_branch1_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.1.conv1.*    | res2_1_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2_1_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2_1_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2_2_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2_2_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2_2_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3_0_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3_0_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3_0_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3_0_branch1_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3_1_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3_1_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3_1_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3_2_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3_2_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3_2_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3_3_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3_3_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3_3_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4_0_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4_0_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4_0_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4_0_branch1_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4_1_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4_1_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4_1_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4_2_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4_2_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4_2_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4_3_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4_3_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4_3_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4_4_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4_4_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4_4_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4_5_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4_5_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4_5_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5_0_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5_0_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5_0_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5_0_branch1_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5_1_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5_1_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5_1_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5_2_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5_2_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5_2_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.norm.* | res_conv1_bn_*           | (64,) (64,) (64,) (64,)                         |
| stem.conv1.weight | conv1_w                  | (64, 3, 7, 7)                                   |
[32m[12/12 23:13:24 d2.engine.train_loop]: [0mStarting training from iteration 0
[32m[12/12 23:13:27 d2.utils.events]: [0m eta: 0:00:11  iter: 19  total_loss: 3.302  loss_cls: 0.5146  loss_box_reg: 0.02808  loss_mask: 0.6728  loss_rpn_cls: 0.6589  loss_rpn_loc: 1.292  time: 0.1519  data_time: 0.0217  lr: 0.00019981  max_mem: 3213M
[32m[12/12 23:13:31 d2.utils.events]: [0m eta: 0:00:09  iter: 39  total_loss: 2.371  loss_cls: 0.3481  loss_box_reg: 0.04192  loss_mask: 0.5961  loss_rpn_cls: 0.5985  loss_rpn_loc: 0.76  time: 0.1500  data_time: 0.0019  lr: 0.00039961  max_mem: 3213M
[32m[12/12 23:13:34 d2.utils.events]: [0m eta: 0:00:06  iter: 59  total_loss: 2.162  loss_cls: 0.2716  loss_box_reg: 0.1005  loss_mask: 0.5849  loss_rpn_cls: 0.583  loss_rpn_loc: 0.6629  time: 0.1509  data_time: 0.0017  lr: 0.00059941  max_mem: 3213M
[32m[12/12 23:13:38 d2.utils.events]: [0m eta: 0:00:03  iter: 79  total_loss: 2.169  loss_cls: 0.2656  loss_box_reg: 0.1649  loss_mask: 0.5573  loss_rpn_cls: 0.542  loss_rpn_loc: 0.552  time: 0.1520  data_time: 0.0017  lr: 0.00079921  max_mem: 3213M
[32m[12/12 23:13:42 d2.utils.events]: [0m eta: 0:00:00  iter: 99  total_loss: 2.15  loss_cls: 0.2744  loss_box_reg: 0.3455  loss_mask: 0.5349  loss_rpn_cls: 0.4599  loss_rpn_loc: 0.5113  time: 0.1547  data_time: 0.0018  lr: 0.00099901  max_mem: 3213M
[32m[12/12 23:13:42 d2.engine.hooks]: [0mOverall training speed: 98 iterations in 0:00:15 (0.1547 s / it)
[32m[12/12 23:13:42 d2.engine.hooks]: [0mTotal training time: 0:00:17 (0:00:02 on hooks)
[32m[12/12 23:13:43 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[32m[12/12 23:13:43 d2.data.common]: [0mSerializing 20 elements to byte tensors and concatenating them all ...
[32m[12/12 23:13:43 d2.data.common]: [0mSerialized dataset takes 0.46 MiB
[5m[31mWARNING[0m [32m[12/12 23:13:43 d2.engine.defaults]: [0mNo evaluator found. Use `DefaultTrainer.test(evaluators=)`, or implement its `build_evaluator` method.
[32m[12/12 23:13:43 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[32m[12/12 23:13:43 d2.data.common]: [0mSerializing 6 elements to byte tensors and concatenating them all ...
[32m[12/12 23:13:43 d2.data.common]: [0mSerialized dataset takes 0.11 MiB
[5m[31mWARNING[0m [32m[12/12 23:13:43 d2.engine.defaults]: [0mNo evaluator found. Use `DefaultTrainer.test(evaluators=)`, or implement its `build_evaluator` method.
USING MODEL WEIGHT: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_0000049.pth
Dataset: satellite_Val
	File: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
	num_instances: 250
gt filename: S08_03_SE1_1000X03.png	 pred filename: S08_03_SE1_1000X03.png
gt filename: S06_01_SE1_500X67.png	 pred filename: S06_01_SE1_500X67.png
gt filename: S04_02_SE1_1000X50.png	 pred filename: S04_02_SE1_1000X50.png
gt filename: S03_03_SE1_1250X41.png	 pred filename: S03_03_SE1_1250X41.png
gt filename: S02_01_SE1_300X14.png	 pred filename: S02_01_SE1_300X14.png
gt filename: HP743_2S_250x.png	 pred filename: HP743_2S_250x.png
x:  [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2]
y:  [0.0, 0.0, 0.0, 0.01, 0.01, 0.0, 0.0, 0.0, 0.02, 0.02, 0.02, 0.02]
Average Precision Score:  0.004
Average Recall Score:     0.01350942779514208
Precision: 0.0
Recall: 0.0
---
Precision: 0.0
Recall: 0.0
---
Precision: 0.003182438137299474
Recall: 0.027952082144894468
---
Precision: 0.006551518761167362
Recall: 0.017326732673267328
---
Precision: 0.05780394417225905
Recall: 0.1863799283154122
---
Precision: 0.0027147273961239727
Recall: 0.010717475439118785
---
USING MODEL WEIGHT: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_final.pth
Dataset: satellite_Val
	File: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
	num_instances: 250
gt filename: S08_03_SE1_1000X03.png	 pred filename: S08_03_SE1_1000X03.png
gt filename: S06_01_SE1_500X67.png	 pred filename: S06_01_SE1_500X67.png
gt filename: S04_02_SE1_1000X50.png	 pred filename: S04_02_SE1_1000X50.png
gt filename: S03_03_SE1_1250X41.png	 pred filename: S03_03_SE1_1250X41.png
gt filename: S02_01_SE1_300X14.png	 pred filename: S02_01_SE1_300X14.png
gt filename: HP743_2S_250x.png	 pred filename: HP743_2S_250x.png
x:  [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2]
y:  [0.05, 0.01, 0.03, 0.07, 0.06, 0.0, 0.14, 0.06, 0.16, 0.16, 0.15, 0.02]
Average Precision Score:  0.03733333333333333
Average Recall Score:     0.11385104956533527
Precision: 0.000342608610845887
Recall: 0.0008157539166415002
---
Precision: 7.349768513971847e-05
Recall: 0.0002073689263026925
---
Precision: 0.00021909132250694718
Recall: 0.00634280828491162
---
Precision: 0.0005230937129541535
Recall: 0.001161934872314306
---
Precision: 0.0004650723130730693
Recall: 0.0011683648591312937
---
Precision: 1.9726318466616905e-05
Recall: 3.300674339555694e-05
---
Ignoring Final Model
USING MODEL WEIGHT: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_0000099.pth
Dataset: satellite_Val
	File: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
	num_instances: 250
gt filename: S08_03_SE1_1000X03.png	 pred filename: S08_03_SE1_1000X03.png
gt filename: S06_01_SE1_500X67.png	 pred filename: S06_01_SE1_500X67.png
gt filename: S04_02_SE1_1000X50.png	 pred filename: S04_02_SE1_1000X50.png
gt filename: S03_03_SE1_1250X41.png	 pred filename: S03_03_SE1_1250X41.png
gt filename: S02_01_SE1_300X14.png	 pred filename: S02_01_SE1_300X14.png
gt filename: HP743_2S_250x.png	 pred filename: HP743_2S_250x.png
x:  [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2]
y:  [0.05, 0.01, 0.03, 0.07, 0.06, 0.0, 0.14, 0.06, 0.16, 0.16, 0.15, 0.02]
Average Precision Score:  0.03733333333333333
Average Recall Score:     0.11385104956533527
Precision: 0.000342608610845887
Recall: 0.0008157539166415002
---
Precision: 7.349768513971847e-05
Recall: 0.0002073689263026925
---
Precision: 0.00021909132250694718
Recall: 0.00634280828491162
---
Precision: 0.0005230937129541535
Recall: 0.001161934872314306
---
Precision: 0.0004650723130730693
Recall: 0.0011683648591312937
---
Precision: 1.9726318466616905e-05
Recall: 3.300674339555694e-05
---
Deleting: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_0000049.pth
Current File Path
../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_0000049.pth
New File Path
../../../../../../../ocean/projects/dmr200021p/sprice/variance/REPO_Test/trial1/model3.pth
Deleting: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_final.pth
Current File Path
../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_final.pth
New File Path
../../../../../../../ocean/projects/dmr200021p/sprice/variance/REPO_Test/trial1/model3.pth
Deleting: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_0000099.pth
Current File Path
../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_0000099.pth
New File Path
../../../../../../../ocean/projects/dmr200021p/sprice/variance/REPO_Test/trial1/model3.pth
Deleting: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/results_checkpoint_0000049.pickle
../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/results_checkpoint_0000049.pickle
Deleting: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/results_checkpoint_final.pickle
../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/results_checkpoint_final.pickle
Deleting: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/results_checkpoint_0000099.pickle
../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/results_checkpoint_0000099.pickle
Removing: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/metrics.json
Removing: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/last_checkpoint
Registered Datasets: ['satellite_Train', 'satellite_Val']
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/HP743_4S_500x.png
	num_instances: 103
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S08_01_SE1_1000X94.png
	num_instances: 68
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/HP743_6S_250x.png
	num_instances: 102
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
	num_instances: 88
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
	num_instances: 54
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
	num_instances: 45
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
	num_instances: 111
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
	num_instances: 98
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
	num_instances: 49
Weights not found, weights will be downloaded from source: https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl
[32m[12/12 23:14:48 d2.engine.defaults]: [0mModel:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn3): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn4): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (deconv_relu): ReLU()
      (predictor): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[32m[12/12 23:14:48 d2.data.build]: [0mRemoved 0 images with no usable annotations. 20 images left.
[32m[12/12 23:14:48 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice')]
[32m[12/12 23:14:48 d2.data.build]: [0mUsing training sampler TrainingSampler
[32m[12/12 23:14:48 d2.data.common]: [0mSerializing 20 elements to byte tensors and concatenating them all ...
[32m[12/12 23:14:48 d2.data.common]: [0mSerialized dataset takes 0.46 MiB
[5m[31mWARNING[0m [32m[12/12 23:14:48 d2.solver.build]: [0mSOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[32m[12/12 23:14:48 d2.checkpoint.c2_model_loading]: [0mRenaming Caffe2 weights ......
[32m[12/12 23:14:48 d2.checkpoint.c2_model_loading]: [0mFollowing weights matched with submodule backbone.bottom_up:
| Names in Model    | Names in Checkpoint      | Shapes                                          |
|:------------------|:-------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2_0_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| res2.0.conv2.*    | res2_0_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2_0_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2_0_branch1_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.1.conv1.*    | res2_1_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2_1_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2_1_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2_2_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2_2_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2_2_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3_0_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3_0_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3_0_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3_0_branch1_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3_1_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3_1_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3_1_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3_2_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3_2_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3_2_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3_3_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3_3_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3_3_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4_0_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4_0_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4_0_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4_0_branch1_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4_1_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4_1_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4_1_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4_2_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4_2_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4_2_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4_3_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4_3_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4_3_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4_4_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4_4_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4_4_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4_5_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4_5_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4_5_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5_0_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5_0_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5_0_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5_0_branch1_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5_1_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5_1_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5_1_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5_2_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5_2_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5_2_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.norm.* | res_conv1_bn_*           | (64,) (64,) (64,) (64,)                         |
| stem.conv1.weight | conv1_w                  | (64, 3, 7, 7)                                   |
[32m[12/12 23:14:48 d2.engine.train_loop]: [0mStarting training from iteration 0
[32m[12/12 23:14:52 d2.utils.events]: [0m eta: 0:00:11  iter: 19  total_loss: 3.303  loss_cls: 0.5161  loss_box_reg: 0.02804  loss_mask: 0.6728  loss_rpn_cls: 0.6589  loss_rpn_loc: 1.292  time: 0.1515  data_time: 0.0216  lr: 0.00019981  max_mem: 3213M
[32m[12/12 23:14:55 d2.utils.events]: [0m eta: 0:00:09  iter: 39  total_loss: 2.368  loss_cls: 0.3503  loss_box_reg: 0.0395  loss_mask: 0.5959  loss_rpn_cls: 0.5985  loss_rpn_loc: 0.7604  time: 0.1499  data_time: 0.0018  lr: 0.00039961  max_mem: 3213M
[32m[12/12 23:14:59 d2.utils.events]: [0m eta: 0:00:06  iter: 59  total_loss: 2.195  loss_cls: 0.2668  loss_box_reg: 0.1125  loss_mask: 0.5857  loss_rpn_cls: 0.5829  loss_rpn_loc: 0.6629  time: 0.1508  data_time: 0.0016  lr: 0.00059941  max_mem: 3213M
[32m[12/12 23:15:02 d2.utils.events]: [0m eta: 0:00:03  iter: 79  total_loss: 2.176  loss_cls: 0.2665  loss_box_reg: 0.1936  loss_mask: 0.5608  loss_rpn_cls: 0.5418  loss_rpn_loc: 0.5532  time: 0.1521  data_time: 0.0017  lr: 0.00079921  max_mem: 3213M
[32m[12/12 23:15:06 d2.utils.events]: [0m eta: 0:00:00  iter: 99  total_loss: 2.153  loss_cls: 0.2771  loss_box_reg: 0.3639  loss_mask: 0.5296  loss_rpn_cls: 0.4616  loss_rpn_loc: 0.509  time: 0.1549  data_time: 0.0019  lr: 0.00099901  max_mem: 3213M
[32m[12/12 23:15:07 d2.engine.hooks]: [0mOverall training speed: 98 iterations in 0:00:15 (0.1549 s / it)
[32m[12/12 23:15:07 d2.engine.hooks]: [0mTotal training time: 0:00:17 (0:00:02 on hooks)
[32m[12/12 23:15:07 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[32m[12/12 23:15:07 d2.data.common]: [0mSerializing 20 elements to byte tensors and concatenating them all ...
[32m[12/12 23:15:07 d2.data.common]: [0mSerialized dataset takes 0.46 MiB
[5m[31mWARNING[0m [32m[12/12 23:15:07 d2.engine.defaults]: [0mNo evaluator found. Use `DefaultTrainer.test(evaluators=)`, or implement its `build_evaluator` method.
[32m[12/12 23:15:07 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[32m[12/12 23:15:07 d2.data.common]: [0mSerializing 6 elements to byte tensors and concatenating them all ...
[32m[12/12 23:15:07 d2.data.common]: [0mSerialized dataset takes 0.11 MiB
[5m[31mWARNING[0m [32m[12/12 23:15:07 d2.engine.defaults]: [0mNo evaluator found. Use `DefaultTrainer.test(evaluators=)`, or implement its `build_evaluator` method.
USING MODEL WEIGHT: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_0000049.pth
Dataset: satellite_Val
	File: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
	num_instances: 250
gt filename: S08_03_SE1_1000X03.png	 pred filename: S08_03_SE1_1000X03.png
gt filename: S06_01_SE1_500X67.png	 pred filename: S06_01_SE1_500X67.png
gt filename: S04_02_SE1_1000X50.png	 pred filename: S04_02_SE1_1000X50.png
gt filename: S03_03_SE1_1250X41.png	 pred filename: S03_03_SE1_1250X41.png
gt filename: S02_01_SE1_300X14.png	 pred filename: S02_01_SE1_300X14.png
gt filename: HP743_2S_250x.png	 pred filename: HP743_2S_250x.png
x:  [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2]
y:  [0.0, 0.0, 0.0, 0.01, 0.01, 0.0, 0.0, 0.0, 0.02, 0.02, 0.02, 0.02]
Average Precision Score:  0.004
Average Recall Score:     0.01350942779514208
Precision: 0.0
Recall: 0.0
---
Precision: 0.0
Recall: 0.0
---
Precision: 0.002736156351791531
Recall: 0.024151811385853938
---
Precision: 0.006119374882319714
Recall: 0.014623172103487065
---
Precision: 0.05623612595576749
Recall: 0.15312290127602418
---
Precision: 0.003189792663476874
Recall: 0.01215629522431259
---
USING MODEL WEIGHT: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_final.pth
Dataset: satellite_Val
	File: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
	num_instances: 250
gt filename: S08_03_SE1_1000X03.png	 pred filename: S08_03_SE1_1000X03.png
gt filename: S06_01_SE1_500X67.png	 pred filename: S06_01_SE1_500X67.png
gt filename: S04_02_SE1_1000X50.png	 pred filename: S04_02_SE1_1000X50.png
gt filename: S03_03_SE1_1250X41.png	 pred filename: S03_03_SE1_1250X41.png
gt filename: S02_01_SE1_300X14.png	 pred filename: S02_01_SE1_300X14.png
gt filename: HP743_2S_250x.png	 pred filename: HP743_2S_250x.png
x:  [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2]
y:  [0.06, 0.01, 0.03, 0.06, 0.04, 0.02, 0.16, 0.06, 0.16, 0.14, 0.1, 0.08]
Average Precision Score:  0.036000000000000004
Average Recall Score:     0.1163366056223199
Precision: 0.0004792440828442579
Recall: 0.001153353491396624
---
Precision: 9.184780981926894e-05
Recall: 0.0010598432945985844
---
Precision: 0.00024970622796709755
Recall: 0.022224924751451765
---
Precision: 0.0004480417558045902
Recall: 0.001274087495952166
---
Precision: 0.00035296975340191997
Recall: 0.000931795258865414
---
Precision: 6.5271136918525e-05
Recall: 0.0001825710132346761
---
Ignoring Final Model
USING MODEL WEIGHT: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_0000099.pth
Dataset: satellite_Val
	File: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
	num_instances: 250
	File: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
	num_instances: 250
gt filename: S08_03_SE1_1000X03.png	 pred filename: S08_03_SE1_1000X03.png
gt filename: S06_01_SE1_500X67.png	 pred filename: S06_01_SE1_500X67.png
gt filename: S04_02_SE1_1000X50.png	 pred filename: S04_02_SE1_1000X50.png
gt filename: S03_03_SE1_1250X41.png	 pred filename: S03_03_SE1_1250X41.png
gt filename: S02_01_SE1_300X14.png	 pred filename: S02_01_SE1_300X14.png
gt filename: HP743_2S_250x.png	 pred filename: HP743_2S_250x.png
x:  [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2]
y:  [0.06, 0.01, 0.03, 0.06, 0.04, 0.02, 0.16, 0.06, 0.16, 0.14, 0.1, 0.08]
Average Precision Score:  0.036000000000000004
Average Recall Score:     0.1163366056223199
Precision: 0.0004792440828442579
Recall: 0.001153353491396624
---
Precision: 9.184780981926894e-05
Recall: 0.0010598432945985844
---
Precision: 0.00024970622796709755
Recall: 0.022224924751451765
---
Precision: 0.0004480417558045902
Recall: 0.001274087495952166
---
Precision: 0.00035296975340191997
Recall: 0.000931795258865414
---
Precision: 6.5271136918525e-05
Recall: 0.0001825710132346761
---
Deleting: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_0000049.pth
Current File Path
../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_0000049.pth
New File Path
../../../../../../../ocean/projects/dmr200021p/sprice/variance/REPO_Test/trial1/model4.pth
Deleting: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_final.pth
Current File Path
../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_final.pth
New File Path
../../../../../../../ocean/projects/dmr200021p/sprice/variance/REPO_Test/trial1/model4.pth
Deleting: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_0000099.pth
Current File Path
../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/model_0000099.pth
New File Path
../../../../../../../ocean/projects/dmr200021p/sprice/variance/REPO_Test/trial1/model4.pth
Deleting: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/results_checkpoint_0000049.pickle
../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/results_checkpoint_0000049.pickle
Deleting: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/results_checkpoint_final.pickle
../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/results_checkpoint_final.pickle
Deleting: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/results_checkpoint_0000099.pickle
../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/results_checkpoint_0000099.pickle
Removing: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/metrics.json
Removing: ../../../../../ocean/projects/dmr200021p/sprice/tuning/weights/batch_temp2/last_checkpoint
Registered Datasets: ['satellite_Train', 'satellite_Val']
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/HP743_4S_500x.png
	num_instances: 103
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S08_01_SE1_1000X94.png
	num_instances: 68
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/HP743_6S_250x.png
	num_instances: 102
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S08_03_SE1_1000X03.png
	num_instances: 88
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S06_01_SE1_500X67.png
	num_instances: 54
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S04_02_SE1_1000X50.png
	num_instances: 45
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S03_03_SE1_1250X41.png
	num_instances: 111
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/S02_01_SE1_300X14.png
	num_instances: 98
ddict info:
	path: ../Data/Training_Data/VIA/../SEM/HP743_2S_250x.png
	num_instances: 49
Weights not found, weights will be downloaded from source: https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl
[32m[12/12 23:16:12 d2.engine.defaults]: [0mModel:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn3): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn4): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (deconv_relu): ReLU()
      (predictor): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[32m[12/12 23:16:12 d2.data.build]: [0mRemoved 0 images with no usable annotations. 20 images left.
[32m[12/12 23:16:12 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice')]
[32m[12/12 23:16:12 d2.data.build]: [0mUsing training sampler TrainingSampler
[32m[12/12 23:16:12 d2.data.common]: [0mSerializing 20 elements to byte tensors and concatenating them all ...
[32m[12/12 23:16:12 d2.data.common]: [0mSerialized dataset takes 0.46 MiB
[5m[31mWARNING[0m [32m[12/12 23:16:12 d2.solver.build]: [0mSOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[32m[12/12 23:16:13 d2.checkpoint.c2_model_loading]: [0mRenaming Caffe2 weights ......
[32m[12/12 23:16:13 d2.checkpoint.c2_model_loading]: [0mFollowing weights matched with submodule backbone.bottom_up:
| Names in Model    | Names in Checkpoint      | Shapes                                          |
|:------------------|:-------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2_0_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| res2.0.conv2.*    | res2_0_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2_0_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2_0_branch1_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.1.conv1.*    | res2_1_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2_1_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2_1_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2_2_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2_2_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2_2_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3_0_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3_0_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3_0_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3_0_branch1_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3_1_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3_1_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3_1_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3_2_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3_2_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3_2_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3_3_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3_3_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3_3_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4_0_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4_0_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4_0_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4_0_branch1_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4_1_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4_1_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4_1_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4_2_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4_2_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4_2_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4_3_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4_3_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4_3_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4_4_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4_4_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4_4_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4_5_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4_5_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4_5_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5_0_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5_0_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5_0_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5_0_branch1_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5_1_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5_1_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5_1_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5_2_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5_2_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5_2_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.norm.* | res_conv1_bn_*           | (64,) (64,) (64,) (64,)                         |
| stem.conv1.weight | conv1_w                  | (64, 3, 7, 7)                                   |
[32m[12/12 23:16:13 d2.engine.train_loop]: [0mStarting training from iteration 0
[32m[12/12 23:16:16 d2.utils.events]: [0m eta: 0:00:12  iter: 19  total_loss: 3.307  loss_cls: 0.5156  loss_box_reg: 0.02809  loss_mask: 0.6728  loss_rpn_cls: 0.6589  loss_rpn_loc: 1.292  time: 0.1524  data_time: 0.0211  lr: 0.00019981  max_mem: 3213M
[32m[12/12 23:16:19 d2.utils.events]: [0m eta: 0:00:09  iter: 39  total_loss: 2.369  loss_cls: 0.3497  loss_box_reg: 0.04001  loss_mask: 0.5961  loss_rpn_cls: 0.5985  loss_rpn_loc: 0.7601  time: 0.1506  data_time: 0.0020  lr: 0.00039961  max_mem: 3213M
[32m[12/12 23:16:23 d2.utils.events]: [0m eta: 0:00:06  iter: 59  total_loss: 2.175  loss_cls: 0.265  loss_box_reg: 0.1061  loss_mask: 0.5837  loss_rpn_cls: 0.583  loss_rpn_loc: 0.6631  time: 0.1513  data_time: 0.0018  lr: 0.00059941  max_mem: 3213M
[32m[12/12 23:16:26 d2.utils.events]: [0m eta: 0:00:03  iter: 79  total_loss: 2.173  loss_cls: 0.2626  loss_box_reg: 0.1761  loss_mask: 0.5586  loss_rpn_cls: 0.5419  loss_rpn_loc: 0.5534  time: 0.1527  data_time: 0.0019  lr: 0.00079921  max_mem: 3213M
[32m[12/12 23:16:30 d2.utils.events]: [0m eta: 0:00:00  iter: 99  total_loss: 2.16  loss_cls: 0.2782  loss_box_reg: 0.3354  loss_mask: 0.5325  loss_rpn_cls: 0.461  loss_rpn_loc: 0.5108  time: 0.1554  data_time: 0.0021  lr: 0.00099901  max_mem: 3213M
[32m[12/12 23:16:30 d2.engine.hooks]: [0mOverall training speed: 98 iterations in 0:00:15 (0.1554 s / it)
[32m[12/12 23:16:30 d2.engine.hooks]: [0mTotal training time: 0:00:17 (0:00:01 on hooks)
[32m[12/12 23:16:31 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[32m[12/12 23:16:31 d2.data.common]: [0mSerializing 20 elements to byte tensors and concatenating them all ...
[32m[12/12 23:16:31 d2.data.common]: [0mSerialized dataset takes 0.46 MiB
[5m[31mWARNING[0m [32m[12/12 23:16:31 d2.engine.defaults]: [0mNo evaluator found. Use `DefaultTrainer.test(evaluators=)`, or implement its `build_evaluator` method.
[32m[12/12 23:16:31 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[32m[12/12 23:16:31 d2.data.common]: [0mSerializing 6 elements to byte tensors and concatenating them all ...
[32m[12/12 23:16:31 d2.data.common]: [0mSerialized dataset takes 0.11 MiB
[5m[31mWARNING[0m [32m[12/12 23:16:31 d2.engine.defaults]: [0mNo evaluator found. Use `DefaultTrainer.test(evaluators=)`, or implement its `build_evaluator` method.
slurmstepd: error: *** JOB 5577006 ON v014 CANCELLED AT 2021-12-12T23:17:29 ***
